Approach 1: Brute Force Approach
Steps::
1. Start from the first chapter and keep adding sections to the current chapter as long as the total number of questions does not exceed 30.
2. If adding another section exceeds the limit, start a new chapter.
3. Repeat this process until all sections are grouped into new chapters.
Code:
from typing import List


def regroup_brute_force(chapters: List[List[int]]) -> List[List[int]]:
    result = []
    current_chapter = []
    current_sum = 0
    for chapter in chapters:
        for section in chapter:
            if current_sum + section <= 30:
                current_chapter.append(section)
                current_sum += section
            else:
                result.append(current_chapter)
                current_chapter = [section]
                current_sum = section
    if current_chapter:
        result.append(current_chapter)
    return result
Time Complexity: O(n^2), where n is the total number of sections. This approach is simple but inefficient for large datasets.
________________
Approach 2: Optimized Approach
Steps:
1. Loop through each sub-array (chapter) in the input list.
2. Keep a running total of the number of questions.
3. If the running total plus the current sub-array’s sum is less than or equal to 30, merge it with the current chapter.
4. Otherwise, start a new chapter.
Code:
from typing import List


def regroup_greedy(chapters: List[List[int]]) -> List[List[int]]:
    result = []
    current_chapter = []
    current_sum = 0
    for chapter in chapters:
        chapter_sum = sum(chapter)
        if current_sum + chapter_sum <= 30:
            current_chapter.extend(chapter)
            current_sum += chapter_sum
        else:
            if current_chapter:
                result.append(current_chapter)
            current_chapter = chapter[:]
            current_sum = chapter_sum
    if current_chapter:
        result.append(current_chapter)
    return result
Time Complexity: O(n), where n is the total number of sub-arrays. This approach is more efficient and avoids rechecking previously processed chapters.


________________
Output:
Input:
[[1, 2, 3], [20], [2, 4, 8], [1, 1], [15], [11, 2, 4], [40], [1, 2], [1, 3, 2], [48]]
Brute Force Result:
[[1, 2, 3, 20, 1, 1], [2, 4, 8, 15], [11, 2, 4, 1, 2, 1, 3, 2], [40], [48]]
Greedy Approach Result:
[[1, 2, 3, 20, 1, 1], [2, 4, 8, 15], [11, 2, 4, 1, 2, 1, 3, 2], [40], [48]]
Both approaches produce the same result, but the Greedy Approach is faster and more efficient.